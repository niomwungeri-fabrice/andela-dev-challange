{"version":3,"sources":["User-controller.js"],"names":["Users","signup","req","res","body","email","username","firstName","lastName","userRole","password","newUser","User","Helper","hashPassword","Date","status","send","message","isValidEmail","routine","createQuery","db","query","Object","values","rows","id","error","login","text","comparePassword","token","generateToken","delete","deleteQuery","params","userId"],"mappings":"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","file":"User-controller.js","sourceRoot":"/home/inyenyeri/Downloads/JavaScript/andela-dev-challange/src/controller","sourcesContent":["/* Code modified from a file obtained from https://github.com/olawalejarvis/reflection_app_server */\nimport moment from 'moment';\nimport uuidv4 from 'uuid/v4';\nimport Helper from './Helper-controller';\nimport db from '../db';\nimport User from '../model/user';\n\nconst Users = {\n  // Register a user\n  async signup(req, res) {\n    const {\n      email, username, firstName, lastName, userRole, password,\n    } = req.body;\n    const newUser = new User(uuidv4(), email, username, firstName, lastName, userRole,\n      Helper.hashPassword(password), moment(new Date()), moment(new Date()));\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send({ message: 'Some values are missing' });\n    }\n    if (!Helper.isValidEmail(req.body.email)) {\n      return res.status(400).send({ message: 'Please enter a valid email address' });\n    }\n    if (req.body.routine === '_bt_check_unique') {\n      return res.status(400).send({ message: 'User already exist' });\n    }\n    const createQuery = `INSERT INTO\n      users(id, email, username, first_name, last_name,user_role, password, created_date, modified_date)\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\n      returning *`;\n    try {\n      const { rows } = await db.query(createQuery, Object.values(newUser));\n      return res.status(201).send(rows[0].id);\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n  // Login a user\n  async login(req, res) {\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send({ message: 'Some values are missing' });\n    }\n    if (!Helper.isValidEmail(req.body.email)) {\n      return res.status(400).send({ message: 'Please enter a valid email address' });\n    }\n    const text = 'SELECT * FROM users WHERE email = $1';\n    try {\n      const { rows } = await db.query(text, [req.body.email]);\n      if (!rows[0]) {\n        return res.status(400).send({ message: 'The credentials you provided is incorrect' });\n      }\n      if (!Helper.comparePassword(rows[0].password, req.body.password)) {\n        return res.status(400).send({ message: 'The credentials you provided is incorrect' });\n      }\n      const token = Helper.generateToken(rows[0].id);\n      return res.status(200).send({ token });\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n  async delete(req, res) {\n    const deleteQuery = 'DELETE FROM users WHERE email = $1 returning *';\n    try {\n      const { rows } = await db.query(deleteQuery, [req.params.userId]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'user not found' });\n      }\n      return res.status(204).send({ message: 'deleted' });\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n};\n\nexport default Users;\n"]}